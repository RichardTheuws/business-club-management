name: Codespaces Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      deployments: write
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        PGHOST: ${{ secrets.PGHOST }}
        PGPORT: ${{ secrets.PGPORT }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -m pytest
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      deployments: write
      packages: read
      
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Create deployment status
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'codespaces',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: process.env.CODESPACE_NAME ? 
              `https://${process.env.CODESPACE_NAME}-5000.preview.app.github.dev` : 
              null
          });

    - name: Verify deployment
      run: |
        if [ -n "$CODESPACE_NAME" ]; then
          echo "Deployment successful to https://${CODESPACE_NAME}-5000.preview.app.github.dev"
        else
          echo "Deployment successful"
        fi
